apiVersion: v1
kind: Pod
metadata:
  name: gatling-runner-result-finder
spec:
  volumes:
  - name: results-data-volume
    emptyDir: {}
  containers:
  - name: gatling-runner
    image: ghcr.io/st-tech/gatling:latest
    volumeMounts:
    - name: results-data-volume
      mountPath: /opt/gatling/results
    command: ["/bin/sh", "-c"]
    args:
      - |
        SIMULATIONS_DIR_PATH=/opt/gatling/user-files/simulations
        TEMP_SIMULATIONS_DIR_PATH=/opt/gatling/user-files/simulations-temp
        RESOURCES_DIR_PATH=/opt/gatling/user-files/resources
        RESULTS_DIR_PATH=/opt/gatling/results
        if [ ! -d ${SIMULATIONS_DIR_PATH} ]; then
          mkdir -p ${SIMULATIONS_DIR_PATH}
        fi
        if [ -d ${TEMP_SIMULATIONS_DIR_PATH} ]; then
          cp -p ${TEMP_SIMULATIONS_DIR_PATH}/*.scala ${SIMULATIONS_DIR_PATH}
        fi
        if [ ! -d ${RESOURCES_DIR_PATH} ]; then
          mkdir -p ${RESOURCES_DIR_PATH}
        fi
        if [ ! -d ${RESULTS_DIR_PATH} ]; then
          mkdir -p ${RESULTS_DIR_PATH}
        fi
        gatling.sh -sf ${SIMULATIONS_DIR_PATH} -s MyBasicSimulation -rsf ${RESOURCES_DIR_PATH} -rf ${RESULTS_DIR_PATH}
        if [ $? -eq 0 ]; then
          touch ${RESULTS_DIR_PATH}/COMPLETED
        fi
    env:
    - name: ENV
      value: dev
    - name: CONCURRENCY
      value: "1"
    - name: DURATION
      value: "1"
  - name: result-finder
    image: rclone/rclone
    volumeMounts:
    - name: results-data-volume
      mountPath: /opt/gatling/results
    command: ["/bin/sh", "-c"]
    args:
      - |
        RESULTS_DIR_PATH=/opt/gatling/results
        while true; do
          echo "trying to find source"
          if [ -f ${RESULTS_DIR_PATH}/COMPLETED ]; then
            for source in $(find ${RESULTS_DIR_PATH} -type f -name *.log)
            do
              echo "found source: ${source}"
            done
            break
          fi
          sleep 1;
        done
